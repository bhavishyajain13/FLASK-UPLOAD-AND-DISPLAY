import cv2
import numpy as np

def preprocess_image(image_path):
    # Read the image
    image = cv2.imread(image_path)
    
    # Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Apply Gaussian blur to reduce noise
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    
    # Apply Canny edge detection
    edges = cv2.Canny(blurred, 50, 150, apertureSize=3)
    
    return edges

def detect_squares(edges):
    # Find contours
    contours, _ = cv2.findContours(edges, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
    
    # Create a black image to draw squares on
    square_image = np.zeros_like(edges)
    
    # Filter contours to find squares
    for contour in contours:
        approx = cv2.approxPolyDP(contour, 0.02 * cv2.arcLength(contour, True), True)
        if len(approx) == 4 and cv2.contourArea(contour) > 100:  # Adjust area threshold as needed
            cv2.drawContours(square_image, [approx], -1, (0, 0, 0), thickness=cv2.FILLED)
    
    return square_image

# Preprocess image
img_pt = "your_image_path.jpg"
edges = preprocess_image(img_pt)

# Detect squares
square_image = detect_squares(edges)

# Display the original image and the square-detected image
cv2.imshow('Original Image', cv2.imread(img_pt))
cv2.imshow('Square Detection', square_image)
cv2.waitKey(0)
cv2.destroyAllWindows()

