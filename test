
import cv2
import numpy as np

def preprocess_image(image_path):
    # Read the image
    image = cv2.imread(image_path)
    
    # Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Apply adaptive thresholding (adaptive thresholding may work better than OTSU in some cases)
    thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 11, 2)
    
    return thresh

def detect_squares(edges):
    # Find contours
    contours, _ = cv2.findContours(edges, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
    
    # Filter contours to find squares
    squares = []
    sq_cord = []
    for contour in contours:
        approx = cv2.approxPolyDP(contour, 0.02 * cv2.arcLength(contour, True), True)
        if len(approx) == 4 and cv2.contourArea(contour) > 100 and cv2.isContourConvex(approx):
            squares.append(approx)
            sq_cord.append([tuple(coord[0]) for coord in approx])
    # Draw squares
    square_image = np.zeros_like(edges)
    cv2.drawContours(square_image, squares, -1, (255, 255, 255), thickness=cv2.FILLED)
    return square_image, sq_cord

# Path to your image
img_pt = 'path_to_your_image.jpg'

thresh = preprocess_image(img_pt)

# Detect squares
blob_image, cord = detect_squares(thresh)

# Display the original image and the blob-detected image
cv2.imshow('Original Image', cv2.imread(img_pt))
cv2.imshow('Blob Detection', blob_image)
cv2.waitKey(0)
cv2.destroyAllWindows()

