import cv2
import matplotlib.pyplot as plt
from skimage import measure, morphology
from skimage.color import label2rgb
from skimage.measure import regionprops
import numpy as np

# Load the image
img = cv2.imread('temp_img_store/SIGN_CHECK.jpg', 0)
img = cv2.threshold(img, 127, 255, cv2.THRESH_BINARY)[1]

# Connected component analysis
blobs = img > img.mean()
blobs_labels = measure.label(blobs, background=1)
image_label_overlay = label2rgb(blobs_labels, image=img)

# Initialize variables
the_biggest_component = 0
total_area = 0
counter = 0
average = 0.0

# Iterate over each blob and get the highest size component
for region in regionprops(blobs_labels):
    if region.area > 10:
        total_area += region.area
        counter += 1

    if region.area >= 250:
        if region.area > the_biggest_component:
            the_biggest_component = region.area

# Calculate average
average = total_area / counter
print("the_biggest_component:", the_biggest_component)
print("average:", average)

# Remove outliers
constant_parameter_1 = 60
constant_parameter_2 = 200
constant_parameter_3 = 200
constant_parameter_4 = 900
a4_small_size_outlier_constant = ((average / constant_parameter_1) * constant_parameter_2) + constant_parameter_3
print("a4_small_size_outlier_constant:", a4_small_size_outlier_constant)
a4_big_size_outlier_constant = a4_small_size_outlier_constant * constant_parameter_4
print("a4_big_size_outlier_constant:", a4_big_size_outlier_constant)

pre_version = morphology.remove_small_objects(blobs_labels, a4_small_size_outlier_constant)
component_sizes = np.bincount(pre_version.ravel())
too_small = component_sizes > a4_big_size_outlier_constant
too_small_mask = too_small[pre_version]
pre_version[too_small_mask] = 0

# Find largest component
largest_component_label = np.argmax(component_sizes[1:]) + 1
largest_component_props = regionprops(pre_version)[largest_component_label - 1]

# Draw rectangle around largest component
minr, minc, maxr, maxc = largest_component_props.bbox
cv2.rectangle(image_label_overlay, (minc, minr), (maxc, maxr), (0, 255, 0), 3)

# Calculate and print area of largest component
area_largest_component = largest_component_props.area
print("Area of largest component:", area_largest_component)

# Display image with rectangle
fig, ax = plt.subplots(figsize=(10, 6))
ax.imshow(image_label_overlay)
ax.set_axis_off()
plt.tight_layout()
plt.show()
