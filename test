def box_show(img_pt):
    image2_copy =cv2.imread(img_pt)
    image2_copy2 =cv2.imread(img_pt)
    # Assuming you have already defined 'image2' and 'binary'
    gray = cv2.cvtColor(image2_copy, cv2.COLOR_BGR2GRAY)
    gray_inverted = cv2.bitwise_not(gray)
    _, binary = cv2.threshold(gray_inverted, 100, 255, cv2.THRESH_BINARY)
    # Make a copy of the source image

    # Find the contours from the thresholded image.
    contours, hierarchy = cv2.findContours(binary, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)

    # Filter contours that are squares
    square_contours = []
    x_cord=[]
    for contour in contours:
        # Approximate the contour to a polygon
        epsilon = 0.04 * cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, epsilon, True)
        
        # If the polygon has four vertices, it's likely a square
        if len(approx) == 4 and 180<= cv2.contourArea(contour) and 400> cv2.contourArea(contour):
            x,_,_,_= cv2.boundingRect(contour)
            x_cord.append(x)
            print(cv2.contourArea(contour), "--",x )
            square_contours.append(contour)

    image2_copy2 = cv2.drawContours(image2_copy2, square_contours, -1, (0, 0, 255), 2)

    print(len(square_contours))

    plt.figure(figsize=[15, 15])
    plt.subplot(121)
    plt.imshow(image2_copy[:, :, ::-1])
    plt.title("all Without Thresholding")
    plt.axis('off')

    # Plot both results for comparison
    plt.figure(figsize=[15, 15])
    plt.subplot(121)
    plt.imshow(image2_copy[:, :, ::-1])
    plt.title("Without Thresholding")
    plt.axis('off')

    plt.subplot(122)
    plt.imshow(image2_copy2[:, :, ::-1])
    plt.title("With Thresholding (Squares only)")
    plt.axis('off')
    x_cord.append(0)
    x_cord.reverse()
    print(x_cord)

    mx_gp=0
    for i in range(1,len(x_cord)):
        gp=x_cord[i]-x_cord[i-1]
        if abs(gp) >= mx_gp:
            mx_gp=gp
            max_gp_index=i-1
            print("index: ",max_gp_index)

    plt.show()
