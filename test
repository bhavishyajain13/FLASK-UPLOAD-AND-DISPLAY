import cv2
import numpy as np

# Load the image
image = cv2.imread('table_image.jpg')
original_image = image.copy()

# Convert image to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply GaussianBlur to reduce noise
blurred = cv2.GaussianBlur(gray, (5, 5), 0)

# Use Canny edge detection
edges = cv2.Canny(blurred, 50, 150, apertureSize=3)

# Find contours in the edged image
contours, _ = cv2.findContours(edges.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Filter out contours based on area and shape to find rectangles (tables)
for contour in contours:
    perimeter = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.02 * perimeter, True)
    
    # If the contour has 4 vertices, it's likely a rectangle (table)
    if len(approx) == 4:
        cv2.drawContours(original_image, [approx], -1, (0, 0, 255), 2)  # Mark the contour in red

# Show the original image with marked rectangles
cv2.imshow('Marked Rectangles', original_image)
cv2.waitKey(0)
cv2.destroyAllWindows()
