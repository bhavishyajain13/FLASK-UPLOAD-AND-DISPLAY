import cv2
import numpy as np

def preprocess_image(image_path):
    # Read the image
    image = cv2.imread(image_path)
    
    # Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Apply thresholding
    _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
    
    return thresh

def detect_squares(thresh):
    # Find contours
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Filter contours to find squares
    squares = []
    for contour in contours:
        perimeter = cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, 0.04 * perimeter, True)
        if len(approx) == 4:  # Square has 4 corners
            squares.append(contour)
    
    # Draw squares
    square_image = np.zeros_like(thresh)
    cv2.drawContours(square_image, squares, -1, (255, 255, 255), thickness=cv2.FILLED)
    
    return square_image

# Preprocess image
img_pt = "your_image_path.jpg"
thresh = preprocess_image(img_pt)

# Detect squares
square_image = detect_squares(thresh)

# Display the original image and the square-detected image
cv2.imshow('Original Image', cv2.imread(img_pt))
cv2.imshow('Square Detection', square_image)
cv2.waitKey(0)
cv2.destroyAllWindows()

