def detect_squares(edges):
    # Find contours
    contours, _ = cv2.findContours(edges, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
    
    # Filter contours to find squares
    squares = []
    sq_cord = []
    for contour in contours:
        # Approximate polygonal curves
        approx = cv2.approxPolyDP(contour, 0.02 * cv2.arcLength(contour, True), True)
        
        # Ensure the contour has exactly four vertices
        if len(approx) == 4:
            # Calculate the bounding rectangle of the contour
            x, y, w, h = cv2.boundingRect(contour)
            
            # Calculate aspect ratio of the bounding rectangle
            aspect_ratio = float(w) / h
            
            # Check if aspect ratio is close to 1 (for squares)
            if 0.9 <= aspect_ratio <= 1.1:
                # Check if the contour is convex
                if cv2.isContourConvex(approx):
                    # Filter based on contour area
                    if cv2.contourArea(contour) > 100:
                        squares.append(approx)
                        sq_cord.append([tuple(coord[0]) for coord in approx])
    
    # Draw squares
    square_image = np.zeros_like(edges)
    cv2.drawContours(square_image, squares, -1, (255, 255, 255), thickness=cv2.FILLED)
    
    return square_image, sq_cord
