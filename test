# import cv2
def otm_valid():
    img_pt="temp_img_store/image.png"
    # Read the image
    image = cv2.imread(img_pt, cv2.IMREAD_COLOR)

    # Convert the image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    # gray = cv2.cvtColor(image, cv2.C)

    # Apply Gaussian blur to reduce noise
    gray_blurred = cv2.GaussianBlur(gray, (5, 5), 0)

    # Detect circles using Hough Circle Transform
    circles = cv2.HoughCircles(gray_blurred, cv2.HOUGH_GRADIENT, dp=1, minDist=50, param1=200, param2=30, minRadius=1, maxRadius=30)
    area=0
    if circles is not None:
        # Convert the coordinates and radius of the circles to integers
        circles = np.round(circles[0, :]).astype("int")
        
        # Draw the circles on the original image
        for (x, y, r) in circles:
            cv2.circle(image, (x, y), r, (0, 255, 0), 2)
            cv2.rectangle(image, (x - 2, y - 2), (x + 2, y + 2), (0, 128, 255), -1)
            area= np.pi*r**2
            # print(area)

        # Display the detected circles
        cv2.imshow('Detected circles', image)
        cv2.waitKey(0)
        cv2.destroyAllWindows()

        return False
    else:
        return True

otm_valid()
