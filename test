def detect_squares(thresh):
    # Find contours
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Filter contours to find squares
    squares = []
    for contour in contours:
        # Approximate the contour to simplify it
        epsilon = 0.03 * cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, epsilon, True)

        # Check if the contour has four vertices and is convex
        if len(approx) == 4 and cv2.isContourConvex(approx):
            squares.append(approx)

    # Draw squares on a blank image
    square_image = np.zeros_like(thresh)
    cv2.drawContours(square_image, squares, -1, (255, 0, 0), 2)

    return square_image
